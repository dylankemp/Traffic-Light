
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08001028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  6 .bss          00000124  20000010  20000010  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000134  20000134  00020010  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000859b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000169c  00000000  00000000  000285d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008e0  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003a81  00000000  00000000  0002ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000350a  00000000  00000000  0002e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031ceb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000023c8  00000000  00000000  00031d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001008 	.word	0x08001008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08001008 	.word	0x08001008

080001d0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	683a      	ldr	r2, [r7, #0]
 80001fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	6892      	ldr	r2, [r2, #8]
 800022e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	6852      	ldr	r2, [r2, #4]
 8000238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	429a      	cmp	r2, r3
 8000242:	d103      	bne.n	800024c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	689a      	ldr	r2, [r3, #8]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	1e5a      	subs	r2, r3, #1
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681b      	ldr	r3, [r3, #0]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3714      	adds	r7, #20
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	0000      	movs	r0, r0
	...

08000270 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <pxCurrentTCBConst2>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	6808      	ldr	r0, [r1, #0]
 8000276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800027a:	f380 8809 	msr	PSP, r0
 800027e:	f3bf 8f6f 	isb	sy
 8000282:	f04f 0000 	mov.w	r0, #0
 8000286:	f380 8811 	msr	BASEPRI, r0
 800028a:	4770      	bx	lr
 800028c:	f3af 8000 	nop.w

08000290 <pxCurrentTCBConst2>:
 8000290:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
	...

080002a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80002a0:	f3ef 8009 	mrs	r0, PSP
 80002a4:	f3bf 8f6f 	isb	sy
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <pxCurrentTCBConst>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	f01e 0f10 	tst.w	lr, #16
 80002b0:	bf08      	it	eq
 80002b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80002b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ba:	6010      	str	r0, [r2, #0]
 80002bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80002c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80002c4:	f380 8811 	msr	BASEPRI, r0
 80002c8:	f3bf 8f4f 	dsb	sy
 80002cc:	f3bf 8f6f 	isb	sy
 80002d0:	f000 f8f6 	bl	80004c0 <vTaskSwitchContext>
 80002d4:	f04f 0000 	mov.w	r0, #0
 80002d8:	f380 8811 	msr	BASEPRI, r0
 80002dc:	bc08      	pop	{r3}
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	6808      	ldr	r0, [r1, #0]
 80002e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e6:	f01e 0f10 	tst.w	lr, #16
 80002ea:	bf08      	it	eq
 80002ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80002f0:	f380 8809 	msr	PSP, r0
 80002f4:	f3bf 8f6f 	isb	sy
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	f3af 8000 	nop.w

08000300 <pxCurrentTCBConst>:
 8000300:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop

08000308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800030e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000312:	f383 8811 	msr	BASEPRI, r3
 8000316:	f3bf 8f6f 	isb	sy
 800031a:	f3bf 8f4f 	dsb	sy
 800031e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000320:	f000 f812 	bl	8000348 <xTaskIncrementTick>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d003      	beq.n	8000332 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SysTick_Handler+0x3c>)
 800032c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	2300      	movs	r3, #0
 8000334:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	e000ed04 	.word	0xe000ed04

08000348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000352:	4b50      	ldr	r3, [pc, #320]	; (8000494 <xTaskIncrementTick+0x14c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 808c 	bne.w	8000474 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800035c:	4b4e      	ldr	r3, [pc, #312]	; (8000498 <xTaskIncrementTick+0x150>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000364:	4a4c      	ldr	r2, [pc, #304]	; (8000498 <xTaskIncrementTick+0x150>)
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d11f      	bne.n	80003b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000370:	4b4a      	ldr	r3, [pc, #296]	; (800049c <xTaskIncrementTick+0x154>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d009      	beq.n	800038e <xTaskIncrementTick+0x46>
	__asm volatile
 800037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800037e:	f383 8811 	msr	BASEPRI, r3
 8000382:	f3bf 8f6f 	isb	sy
 8000386:	f3bf 8f4f 	dsb	sy
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	e7fe      	b.n	800038c <xTaskIncrementTick+0x44>
 800038e:	4b43      	ldr	r3, [pc, #268]	; (800049c <xTaskIncrementTick+0x154>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <xTaskIncrementTick+0x158>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a40      	ldr	r2, [pc, #256]	; (800049c <xTaskIncrementTick+0x154>)
 800039a:	6013      	str	r3, [r2, #0]
 800039c:	4a40      	ldr	r2, [pc, #256]	; (80004a0 <xTaskIncrementTick+0x158>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6013      	str	r3, [r2, #0]
 80003a2:	4b40      	ldr	r3, [pc, #256]	; (80004a4 <xTaskIncrementTick+0x15c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	4a3e      	ldr	r2, [pc, #248]	; (80004a4 <xTaskIncrementTick+0x15c>)
 80003aa:	6013      	str	r3, [r2, #0]
 80003ac:	f000 f908 	bl	80005c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <xTaskIncrementTick+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	693a      	ldr	r2, [r7, #16]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d34d      	bcc.n	8000456 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003ba:	4b38      	ldr	r3, [pc, #224]	; (800049c <xTaskIncrementTick+0x154>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d101      	bne.n	80003c8 <xTaskIncrementTick+0x80>
 80003c4:	2301      	movs	r3, #1
 80003c6:	e000      	b.n	80003ca <xTaskIncrementTick+0x82>
 80003c8:	2300      	movs	r3, #0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d004      	beq.n	80003d8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ce:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <xTaskIncrementTick+0x160>)
 80003d0:	f04f 32ff 	mov.w	r2, #4294967295
 80003d4:	601a      	str	r2, [r3, #0]
					break;
 80003d6:	e03e      	b.n	8000456 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <xTaskIncrementTick+0x154>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d203      	bcs.n	80003f8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80003f0:	4a2d      	ldr	r2, [pc, #180]	; (80004a8 <xTaskIncrementTick+0x160>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6013      	str	r3, [r2, #0]
						break;
 80003f6:	e02e      	b.n	8000456 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	3304      	adds	r3, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff0b 	bl	8000218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000406:	2b00      	cmp	r3, #0
 8000408:	d004      	beq.n	8000414 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	3318      	adds	r3, #24
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff02 	bl	8000218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	4b23      	ldr	r3, [pc, #140]	; (80004ac <xTaskIncrementTick+0x164>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	4a22      	ldr	r2, [pc, #136]	; (80004ac <xTaskIncrementTick+0x164>)
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042a:	4613      	mov	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <xTaskIncrementTick+0x168>)
 8000434:	441a      	add	r2, r3
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3304      	adds	r3, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4610      	mov	r0, r2
 800043e:	f7ff fec7 	bl	80001d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000446:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <xTaskIncrementTick+0x16c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044c:	429a      	cmp	r2, r3
 800044e:	d3b4      	bcc.n	80003ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000450:	2301      	movs	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000454:	e7b1      	b.n	80003ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <xTaskIncrementTick+0x16c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800045c:	4914      	ldr	r1, [pc, #80]	; (80004b0 <xTaskIncrementTick+0x168>)
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	440b      	add	r3, r1
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d907      	bls.n	800047e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800046e:	2301      	movs	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e004      	b.n	800047e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <xTaskIncrementTick+0x170>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <xTaskIncrementTick+0x170>)
 800047c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <xTaskIncrementTick+0x174>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800048a:	697b      	ldr	r3, [r7, #20]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000b4 	.word	0x200000b4
 8000498:	2000009c 	.word	0x2000009c
 800049c:	20000094 	.word	0x20000094
 80004a0:	20000098 	.word	0x20000098
 80004a4:	200000ac 	.word	0x200000ac
 80004a8:	200000b0 	.word	0x200000b0
 80004ac:	200000a0 	.word	0x200000a0
 80004b0:	20000030 	.word	0x20000030
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	200000a4 	.word	0x200000a4
 80004bc:	200000a8 	.word	0x200000a8

080004c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80004c6:	4b39      	ldr	r3, [pc, #228]	; (80005ac <vTaskSwitchContext+0xec>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80004ce:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <vTaskSwitchContext+0xf0>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80004d4:	e065      	b.n	80005a2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80004d6:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <vTaskSwitchContext+0xf0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80004dc:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <vTaskSwitchContext+0xf4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d111      	bne.n	8000518 <vTaskSwitchContext+0x58>
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	3304      	adds	r3, #4
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d10b      	bne.n	8000518 <vTaskSwitchContext+0x58>
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	3308      	adds	r3, #8
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	429a      	cmp	r2, r3
 800050a:	d105      	bne.n	8000518 <vTaskSwitchContext+0x58>
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	330c      	adds	r3, #12
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	429a      	cmp	r2, r3
 8000516:	d008      	beq.n	800052a <vTaskSwitchContext+0x6a>
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <vTaskSwitchContext+0xf4>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <vTaskSwitchContext+0xf4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3334      	adds	r3, #52	; 0x34
 8000522:	4619      	mov	r1, r3
 8000524:	4610      	mov	r0, r2
 8000526:	f000 fc0d 	bl	8000d44 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <vTaskSwitchContext+0xf8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	fab3 f383 	clz	r3, r3
 8000536:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000538:	7afb      	ldrb	r3, [r7, #11]
 800053a:	f1c3 031f 	rsb	r3, r3, #31
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	491e      	ldr	r1, [pc, #120]	; (80005bc <vTaskSwitchContext+0xfc>)
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d109      	bne.n	8000568 <vTaskSwitchContext+0xa8>
	__asm volatile
 8000554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000558:	f383 8811 	msr	BASEPRI, r3
 800055c:	f3bf 8f6f 	isb	sy
 8000560:	f3bf 8f4f 	dsb	sy
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e7fe      	b.n	8000566 <vTaskSwitchContext+0xa6>
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <vTaskSwitchContext+0xfc>)
 8000574:	4413      	add	r3, r2
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	3308      	adds	r3, #8
 800058a:	429a      	cmp	r2, r3
 800058c:	d104      	bne.n	8000598 <vTaskSwitchContext+0xd8>
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <vTaskSwitchContext+0xf4>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000b4 	.word	0x200000b4
 80005b0:	200000a8 	.word	0x200000a8
 80005b4:	2000002c 	.word	0x2000002c
 80005b8:	200000a0 	.word	0x200000a0
 80005bc:	20000030 	.word	0x20000030

080005c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <prvResetNextTaskUnblockTime+0x44>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <prvResetNextTaskUnblockTime+0x14>
 80005d0:	2301      	movs	r3, #1
 80005d2:	e000      	b.n	80005d6 <prvResetNextTaskUnblockTime+0x16>
 80005d4:	2300      	movs	r3, #0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d004      	beq.n	80005e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <prvResetNextTaskUnblockTime+0x48>)
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80005e2:	e008      	b.n	80005f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <prvResetNextTaskUnblockTime+0x44>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <prvResetNextTaskUnblockTime+0x48>)
 80005f4:	6013      	str	r3, [r2, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000094 	.word	0x20000094
 8000608:	200000b0 	.word	0x200000b0

0800060c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <DAC_SetChannel1Data+0x34>)
 800061e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	3308      	adds	r3, #8
 8000628:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	461a      	mov	r2, r3
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	6013      	str	r3, [r2, #0]
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40007400 	.word	0x40007400

08000644 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <DMA_Init+0xac>)
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800066e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800067a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000686:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800068c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000692:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000698:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4313      	orrs	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f023 0307 	bic.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4313      	orrs	r3, r2
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	691a      	ldr	r2, [r3, #16]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60da      	str	r2, [r3, #12]
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	f01c803f 	.word	0xf01c803f

080006f4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f043 0201 	orr.w	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000712:	e005      	b.n	8000720 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f023 0201 	bic.w	r2, r3, #1
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e001      	b.n	800074e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <DMA_GetFlagStatus+0x6c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d802      	bhi.n	800077c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <DMA_GetFlagStatus+0x70>)
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	e001      	b.n	8000780 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <DMA_GetFlagStatus+0x74>)
 800077e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e002      	b.n	8000798 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800079e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007a2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	4013      	ands	r3, r2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80007ae:	2301      	movs	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
 80007b2:	e001      	b.n	80007b8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	4002640f 	.word	0x4002640f
 80007cc:	40026000 	.word	0x40026000
 80007d0:	40026400 	.word	0x40026400

080007d4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <DMA_ClearFlag+0x50>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d802      	bhi.n	80007ec <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <DMA_ClearFlag+0x54>)
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e001      	b.n	80007f0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <DMA_ClearFlag+0x58>)
 80007ee:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d007      	beq.n	800080a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000800:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000808:	e006      	b.n	8000818 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000810:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	6093      	str	r3, [r2, #8]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	4002640f 	.word	0x4002640f
 8000828:	40026000 	.word	0x40026000
 800082c:	40026400 	.word	0x40026400

08000830 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e076      	b.n	800093a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800084c:	2201      	movs	r2, #1
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d165      	bne.n	8000934 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2103      	movs	r1, #3
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	401a      	ands	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	431a      	orrs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d003      	beq.n	80008a6 <GPIO_Init+0x76>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	791b      	ldrb	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d12e      	bne.n	8000904 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2103      	movs	r1, #3
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	4619      	mov	r1, r3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	2301      	movs	r3, #1
 80008e0:	408b      	lsls	r3, r1
 80008e2:	43db      	mvns	r3, r3
 80008e4:	401a      	ands	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	7992      	ldrb	r2, [r2, #6]
 80008f2:	4611      	mov	r1, r2
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	b292      	uxth	r2, r2
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	b292      	uxth	r2, r2
 80008fe:	431a      	orrs	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	b29b      	uxth	r3, r3
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2103      	movs	r1, #3
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	401a      	ands	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	79db      	ldrb	r3, [r3, #7]
 8000924:	4619      	mov	r1, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d985      	bls.n	800084c <GPIO_Init+0x1c>
    }
  }
}
 8000940:	bf00      	nop
 8000942:	371c      	adds	r7, #28
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	887a      	ldrh	r2, [r7, #2]
 800095c:	831a      	strh	r2, [r3, #24]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	460b      	mov	r3, r1
 8000974:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	887a      	ldrh	r2, [r7, #2]
 800097a:	835a      	strh	r2, [r3, #26]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800099a:	490a      	ldr	r1, [pc, #40]	; (80009c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800099e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80009a6:	e006      	b.n	80009b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80009ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4013      	ands	r3, r2
 80009b4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	819a      	strh	r2, [r3, #12]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	891b      	ldrh	r3, [r3, #8]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	4013      	ands	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
 8000a0a:	e001      	b.n	8000a10 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000a24:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <Audio_MAL_IRQHandler+0xec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4610      	mov	r0, r2
 8000a30:	f7ff fe94 	bl	800075c <DMA_GetFlagStatus>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d064      	beq.n	8000b04 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d04c      	beq.n	8000adc <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000a42:	bf00      	nop
 8000a44:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe6f 	bl	800072c <DMA_GetCmdStatus>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f7      	bne.n	8000a44 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <Audio_MAL_IRQHandler+0xec>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4610      	mov	r0, r2
 8000a60:	f7ff feb8 	bl	80007d4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <Audio_MAL_IRQHandler+0xf4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <Audio_MAL_IRQHandler+0xf8>)
 8000a6c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a76:	4293      	cmp	r3, r2
 8000a78:	bf28      	it	cs
 8000a7a:	4613      	movcs	r3, r2
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <Audio_MAL_IRQHandler+0xf8>)
 8000a7e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4924      	ldr	r1, [pc, #144]	; (8000b18 <Audio_MAL_IRQHandler+0xf8>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fddc 	bl	8000644 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe2e 	bl	80006f4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <Audio_MAL_IRQHandler+0xf4>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa4:	d203      	bcs.n	8000aae <Audio_MAL_IRQHandler+0x8e>
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	e000      	b.n	8000ab0 <Audio_MAL_IRQHandler+0x90>
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <Audio_MAL_IRQHandler+0xfc>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <Audio_MAL_IRQHandler+0xf4>)
 8000ab4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	bf28      	it	cs
 8000ac6:	460b      	movcs	r3, r1
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <Audio_MAL_IRQHandler+0xf0>)
 8000acc:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe0d 	bl	80006f4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000ada:	e013      	b.n	8000b04 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe06 	bl	80006f4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <Audio_MAL_IRQHandler+0xe8>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <Audio_MAL_IRQHandler+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4610      	mov	r0, r2
 8000af4:	f7ff fe6e 	bl	80007d4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <Audio_MAL_IRQHandler+0xf4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f83c 	bl	8000b7c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	20000000 	.word	0x20000000
 8000b14:	200000b8 	.word	0x200000b8
 8000b18:	200000f8 	.word	0x200000f8
 8000b1c:	0001fffe 	.word	0x0001fffe

08000b20 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000b24:	f7ff ff7c 	bl	8000a20 <Audio_MAL_IRQHandler>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000b30:	f7ff ff76 	bl	8000a20 <Audio_MAL_IRQHandler>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <SPI3_IRQHandler+0x3c>)
 8000b40:	f7ff ff51 	bl	80009e6 <SPI_I2S_GetFlagStatus>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d011      	beq.n	8000b6e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <SPI3_IRQHandler+0x40>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d106      	bne.n	8000b60 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000b52:	f000 f81e 	bl	8000b92 <EVAL_AUDIO_GetSampleCallBack>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2004      	movs	r0, #4
 8000b5c:	f7ff fd56 	bl	800060c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000b60:	f000 f817 	bl	8000b92 <EVAL_AUDIO_GetSampleCallBack>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4619      	mov	r1, r3
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <SPI3_IRQHandler+0x3c>)
 8000b6a:	f7ff ff2d 	bl	80009c8 <SPI_I2S_SendData>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40003c00 	.word	0x40003c00
 8000b78:	20000004 	.word	0x20000004

08000b7c <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000b86:	bf00      	nop
}
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b6      	sub	sp, #216	; 0xd8
 8000bf0:	af00      	add	r7, sp, #0
//	STM_EVAL_LEDInit(red_led);
//	STM_EVAL_LEDInit(blue_led);

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8000bf2:	f000 f8ad 	bl	8000d50 <prvSetupHardware>
	//uint16_t newactiveprelighttraffic[8] = {0};
	while (1)
	{

	//reset(Clear)
	GPIO_ResetBits(GPIOC, GPIO_Pin_8);
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	4851      	ldr	r0, [pc, #324]	; (8000d40 <main+0x154>)
 8000bfc:	f7ff feb5 	bl	800096a <GPIO_ResetBits>
	for (int i=0; i<10; i++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000c06:	e004      	b.n	8000c12 <main+0x26>
 8000c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c16:	2b09      	cmp	r3, #9
 8000c18:	ddf6      	ble.n	8000c08 <main+0x1c>

	}
	GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8000c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1e:	4848      	ldr	r0, [pc, #288]	; (8000d40 <main+0x154>)
 8000c20:	f7ff fe94 	bl	800094c <GPIO_SetBits>

	uint32_t newactiveprelighttrafficoff[24] = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2260      	movs	r2, #96	; 0x60
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f9e4 	bl	8000ff8 <memset>
	uint16_t car_value = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

	for (uint16_t i=0; i<24; i++){
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8000c3c:	e00e      	b.n	8000c5c <main+0x70>
		newactiveprelighttrafficoff[i] = car_value;
 8000c3e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000c42:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f843 2cd8 	str.w	r2, [r3, #-216]
	for (uint16_t i=0; i<24; i++){
 8000c52:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8000c5c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000c60:	2b17      	cmp	r3, #23
 8000c62:	d9ec      	bls.n	8000c3e <main+0x52>
	}

	for (uint16_t i=23; i>0; i--){
 8000c64:	2317      	movs	r3, #23
 8000c66:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8000c6a:	e01d      	b.n	8000ca8 <main+0xbc>
		ShiftRegisterValuePreLight(newactiveprelighttrafficoff[i]);
 8000c6c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000c76:	4413      	add	r3, r2
 8000c78:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f884 	bl	8000d8c <ShiftRegisterValuePreLight>

		for(int i = 0; i>10; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000c8a:	e004      	b.n	8000c96 <main+0xaa>
 8000c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000c90:	3301      	adds	r3, #1
 8000c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000c96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	dcf6      	bgt.n	8000c8c <main+0xa0>
	for (uint16_t i=23; i>0; i--){
 8000c9e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8000ca8:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1dd      	bne.n	8000c6c <main+0x80>
		{}
	}

	uint32_t newactiveprelighttraffic[24] = {0};
 8000cb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cb4:	2260      	movs	r2, #96	; 0x60
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f99d 	bl	8000ff8 <memset>
	car_value = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2

	for (uint16_t i=0; i<24; i++){
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8000cca:	e00e      	b.n	8000cea <main+0xfe>
		newactiveprelighttraffic[i] = car_value;
 8000ccc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000cd0:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000cda:	440b      	add	r3, r1
 8000cdc:	f843 2c78 	str.w	r2, [r3, #-120]
	for (uint16_t i=0; i<24; i++){
 8000ce0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8000cea:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000cee:	2b17      	cmp	r3, #23
 8000cf0:	d9ec      	bls.n	8000ccc <main+0xe0>
	}

	for (uint16_t i=23; i>0; i--){
 8000cf2:	2317      	movs	r3, #23
 8000cf4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8000cf8:	e01d      	b.n	8000d36 <main+0x14a>
		ShiftRegisterValuePreLight(newactiveprelighttraffic[i]);
 8000cfa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000d04:	4413      	add	r3, r2
 8000d06:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f83d 	bl	8000d8c <ShiftRegisterValuePreLight>

		for(int i = 0; i>10; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000d18:	e004      	b.n	8000d24 <main+0x138>
 8000d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000d28:	2b0a      	cmp	r3, #10
 8000d2a:	dcf6      	bgt.n	8000d1a <main+0x12e>
	for (uint16_t i=23; i>0; i--){
 8000d2c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000d30:	3b01      	subs	r3, #1
 8000d32:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8000d36:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1dd      	bne.n	8000cfa <main+0x10e>
	{
 8000d3e:	e75a      	b.n	8000bf6 <main+0xa>
 8000d40:	40020800 	.word	0x40020800

08000d44 <vApplicationStackOverflowHook>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8000d4e:	e7fe      	b.n	8000d4e <vApplicationStackOverflowHook+0xa>

08000d50 <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

void prvSetupHardware(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ff24 	bl	8000ba4 <NVIC_SetPriorityGrouping>
	//GPIO_InitTypeDef  GPIO_Init_Shift_2;
	//GPIO_InitTypeDef  GPIO_Init_Shift_3;
	//GPIO_InitTypeDef  GPIO_Init_Traffic;

	/* Enable the GPIO_LED Clock */
	RCC_AHB1PeriphClockCmd(LED_CLK_C, ENABLE);
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff fe12 	bl	8000988 <RCC_AHB1PeriphClockCmd>
	//RCC_AHB1PeriphClockCmd(LED_CLK_A, ENABLE);

	GPIO_Init_Shift_1.GPIO_Pin = SHIFT1_REG_PIN | SHIFT1_CLK_PIN | GPIO_Pin_8;
 8000d64:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d68:	603b      	str	r3, [r7, #0]
	GPIO_Init_Shift_1.GPIO_Mode = GPIO_Mode_OUT;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	713b      	strb	r3, [r7, #4]
	GPIO_Init_Shift_1.GPIO_OType = GPIO_OType_PP;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	71bb      	strb	r3, [r7, #6]
	GPIO_Init_Shift_1.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	71fb      	strb	r3, [r7, #7]
	//GPIO_Init_Shift_1.GPIO_Speed = GPIO_Speed_25MHz;
	GPIO_Init(SHIFT1_REG_Port, &GPIO_Init_Shift_1);
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4803      	ldr	r0, [pc, #12]	; (8000d88 <prvSetupHardware+0x38>)
 8000d7c:	f7ff fd58 	bl	8000830 <GPIO_Init>
//	GPIO_Init(SHIFT3_REG_Port, &GPIO_Init_Shift_3);


	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40020800 	.word	0x40020800

08000d8c <ShiftRegisterValuePreLight>:

void ShiftRegisterValuePreLight(uint16_t value)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
	if (value == 0){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d104      	bne.n	8000da6 <ShiftRegisterValuePreLight+0x1a>
		GPIO_ResetBits(GPIOC, SHIFT1_REG_PIN);
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <ShiftRegisterValuePreLight+0x3c>)
 8000da0:	f7ff fde3 	bl	800096a <GPIO_ResetBits>
 8000da4:	e003      	b.n	8000dae <ShiftRegisterValuePreLight+0x22>

	}else{
		GPIO_SetBits(GPIOC, SHIFT1_REG_PIN);
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <ShiftRegisterValuePreLight+0x3c>)
 8000daa:	f7ff fdcf 	bl	800094c <GPIO_SetBits>
	}
	GPIO_SetBits(GPIOC, SHIFT1_CLK_PIN);
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <ShiftRegisterValuePreLight+0x3c>)
 8000db2:	f7ff fdcb 	bl	800094c <GPIO_SetBits>
	GPIO_ResetBits(GPIOC, SHIFT1_CLK_PIN);
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <ShiftRegisterValuePreLight+0x3c>)
 8000dba:	f7ff fdd6 	bl	800096a <GPIO_ResetBits>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020800 	.word	0x40020800

08000dcc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000df2:	f000 f82b 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f000 f8db 	bl	8000fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fef7 	bl	8000bec <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr  r3, =_sidata
 8000e00:	08001028 	.word	0x08001028
  ldr  r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e08:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e0c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e10:	20000134 	.word	0x20000134

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>

08000e16 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <BusFault_Handler+0x4>

08000e36 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <UsageFault_Handler+0x4>

08000e3c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4a16      	ldr	r2, [pc, #88]	; (8000eac <SystemInit+0x60>)
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <SystemInit+0x60>)
 8000e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e60:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <SystemInit+0x64>)
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <SystemInit+0x64>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <SystemInit+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <SystemInit+0x64>)
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <SystemInit+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <SystemInit+0x64>)
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <SystemInit+0x68>)
 8000e86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <SystemInit+0x64>)
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <SystemInit+0x64>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000e9a:	f000 f80d 	bl	8000eb8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e9e:	4b03      	ldr	r3, [pc, #12]	; (8000eac <SystemInit+0x60>)
 8000ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea4:	609a      	str	r2, [r3, #8]
#endif
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	24003010 	.word	0x24003010

08000eb8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ec6:	4a36      	ldr	r2, [pc, #216]	; (8000fa0 <SetSysClock+0xe8>)
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <SetSysClock+0xe8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <SetSysClock+0xe8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <SetSysClock+0x38>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000eee:	d1f0      	bne.n	8000ed2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <SetSysClock+0xe8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000efc:	2301      	movs	r3, #1
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	e001      	b.n	8000f06 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d142      	bne.n	8000f92 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <SetSysClock+0xe8>)
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <SetSysClock+0xe8>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000f18:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <SetSysClock+0xec>)
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <SetSysClock+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000f24:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <SetSysClock+0xe8>)
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <SetSysClock+0xe8>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <SetSysClock+0xe8>)
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <SetSysClock+0xe8>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f36:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <SetSysClock+0xe8>)
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <SetSysClock+0xe8>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000f42:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <SetSysClock+0xe8>)
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <SetSysClock+0xf0>)
 8000f48:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <SetSysClock+0xe8>)
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <SetSysClock+0xe8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f54:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f56:	bf00      	nop
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <SetSysClock+0xe8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f9      	beq.n	8000f58 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <SetSysClock+0xf4>)
 8000f66:	f240 6205 	movw	r2, #1541	; 0x605
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <SetSysClock+0xe8>)
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <SetSysClock+0xe8>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <SetSysClock+0xe8>)
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <SetSysClock+0xe8>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000f84:	bf00      	nop
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SetSysClock+0xe8>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d1f9      	bne.n	8000f86 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	07405408 	.word	0x07405408
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <__libc_init_array>:
 8000fb0:	b570      	push	{r4, r5, r6, lr}
 8000fb2:	4e0d      	ldr	r6, [pc, #52]	; (8000fe8 <__libc_init_array+0x38>)
 8000fb4:	4c0d      	ldr	r4, [pc, #52]	; (8000fec <__libc_init_array+0x3c>)
 8000fb6:	1ba4      	subs	r4, r4, r6
 8000fb8:	10a4      	asrs	r4, r4, #2
 8000fba:	2500      	movs	r5, #0
 8000fbc:	42a5      	cmp	r5, r4
 8000fbe:	d109      	bne.n	8000fd4 <__libc_init_array+0x24>
 8000fc0:	4e0b      	ldr	r6, [pc, #44]	; (8000ff0 <__libc_init_array+0x40>)
 8000fc2:	4c0c      	ldr	r4, [pc, #48]	; (8000ff4 <__libc_init_array+0x44>)
 8000fc4:	f000 f820 	bl	8001008 <_init>
 8000fc8:	1ba4      	subs	r4, r4, r6
 8000fca:	10a4      	asrs	r4, r4, #2
 8000fcc:	2500      	movs	r5, #0
 8000fce:	42a5      	cmp	r5, r4
 8000fd0:	d105      	bne.n	8000fde <__libc_init_array+0x2e>
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
 8000fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fd8:	4798      	blx	r3
 8000fda:	3501      	adds	r5, #1
 8000fdc:	e7ee      	b.n	8000fbc <__libc_init_array+0xc>
 8000fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fe2:	4798      	blx	r3
 8000fe4:	3501      	adds	r5, #1
 8000fe6:	e7f2      	b.n	8000fce <__libc_init_array+0x1e>
 8000fe8:	08001020 	.word	0x08001020
 8000fec:	08001020 	.word	0x08001020
 8000ff0:	08001020 	.word	0x08001020
 8000ff4:	08001024 	.word	0x08001024

08000ff8 <memset>:
 8000ff8:	4402      	add	r2, r0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d100      	bne.n	8001002 <memset+0xa>
 8001000:	4770      	bx	lr
 8001002:	f803 1b01 	strb.w	r1, [r3], #1
 8001006:	e7f9      	b.n	8000ffc <memset+0x4>

08001008 <_init>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr

08001014 <_fini>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr
